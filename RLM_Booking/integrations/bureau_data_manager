import logging
from typing import Dict, Any
from dotenv import load_dotenv
import os

from api_manager import APIManager  
from progress_manager import ProgressManager  
from data_writer import DataWriter  

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')


class BureauDataManager:
    def __init__(self, api_manager: APIManager):
        """
        Initializes the BureauDataManager with an APIManager instance.
        
        Args:
            api_manager (APIManager): An instance of APIManager to manage API requests.
        """
        self.api_manager = api_manager

    def get_demographics(self, zip_code: str) -> Dict[str, Any]:
        """
        Fetches demographic data for the given ZIP code using the Census Bureau API.
        
        Args:
            zip_code (str): The ZIP code for which to retrieve demographic data.
        
        Returns:
            A dictionary with demographic data or an error message.
        """
        logging.debug(f"Fetching demographics for ZIP code: {zip_code}")
        params = {
            "get": (
                "NAME,B01001_001E,B01001_002E,B01001_026E,"
                "B02001_002E,B02001_003E,B02001_004E,B02001_005E,"
                "B02001_006E,B02001_007E,B02001_008E,"
                "B01001_003E,B01001_004E,B01001_005E,B01001_006E,B01001_007E,"
                "B01001_008E,B01001_009E,B01001_010E,B01001_011E,B01001_012E,"
                "B01001_013E,B01001_014E,B01001_015E,B01001_016E,B01001_017E,"
                "B01001_018E,B01001_019E,B01001_020E,B01001_021E,B01001_022E,"
                "B01001_023E,B01001_024E,B01001_025E"
            ),
            "for": f"zip code tabulation area:{zip_code}",
            "key": self.api_manager.credentials.get("api_key")
        }
        
        # Make the API request using the APIManager.
        response = self.api_manager.make_request("", params=params)
        
        try:
            if len(response) > 1:
                # All of the diff demogrpahic info
                data = response[1]
                demographics = {
                    "ZIP Code": zip_code,
                    "Total Population": data[1],
                    "Male Population": data[2],
                    "Female Population": data[3],
                    "White Population": data[4],
                    "Black or African American Population": data[5],
                    "American Indian and Alaska Native Population": data[6],
                    "Asian Population": data[7],
                    "Native Hawaiian and Other Pacific Islander Population": data[8],
                    "Some Other Race Population": data[9],
                    "Two or More Races Population": data[10],
                    "Age Under 5": data[11],
                    "Age 5 to 9": data[12],
                    "Age 10 to 14": data[13],
                    "Age 15 to 17": data[14],
                    "Age 18 to 19": data[15],
                    "Age 20": data[16],
                    "Age 21": data[17],
                    "Age 22 to 24": data[18],
                    "Age 25 to 29": data[19],
                    "Age 30 to 34": data[20],
                    "Age 35 to 39": data[21],
                    "Age 40 to 44": data[22],
                    "Age 45 to 49": data[23],
                    "Age 50 to 54": data[24],
                    "Age 55 to 59": data[25],
                    "Age 60 to 61": data[26],
                    "Age 62 to 64": data[27],
                    "Age 65 to 66": data[28],
                    "Age 67 to 69": data[29],
                    "Age 70 to 74": data[30],
                    "Age 75 to 79": data[31],
                    "Age 80 to 84": data[32],
                    "Age 85 and over": data[33]
                }
                logging.debug(f"Demographics data retrieved for ZIP code {zip_code}")
                return demographics
            else:
                logging.warning(f"No data found for ZIP code: {zip_code}")
                return {"error": "No data found for the given ZIP code"}
        except Exception as e:
            logging.error(f"Error processing data for ZIP code {zip_code}: {e}")
            return {"error": f"Error processing data: {e}"}

    def fetch_and_save_bureau_data(self, zip_code: str, data_writer: DataWriter, progress_manager: ProgressManager, data_point_limit: int = 10000):
        """
        Coordinates fetching demographic data for a ZIP code and saving it to CSV, 
        tracking progress as it goes.
        
        Args:
            zip_code (str): The ZIP code to process.
            data_writer (DataWriter): Instance for writing data to CSV.
            progress_manager (ProgressManager): Instance for tracking progress.
            data_point_limit (int): Maximum number of entries to write (if processing multiple ZIP codes).
        """
        logging.debug("Starting fetch_and_save_bureau_data")
        # Check if this ZIP code has already been processed.
        if progress_manager.should_skip(zip_code, "zip_code"):
            logging.info(f"ZIP code {zip_code} has already been processed. Skipping.")
            return

        demographics = self.get_demographics(zip_code)
        if "error" in demographics:
            logging.error(f"Error fetching demographics for {zip_code}: {demographics.get('error')}")
            return

        if data_writer.write_entry_to_csv(demographics):
            logging.info(f"Demographics data for ZIP code {zip_code} written to CSV.")
            progress_manager.save_progress(last_zip_code=zip_code)
        else:
            logging.error(f"Failed to write demographics data for ZIP code {zip_code}.")


def main():

    load_dotenv()
    census_api_key = os.getenv("CENSUS_API_KEY")
    
    if not census_api_key:
        logging.error("CENSUS_API_KEY not found in environment variables.")
        return

    api_manager = APIManager(
        base_url="https://api.census.gov/data/2020/acs/acs5",
        auth_type="apikey",
        credentials={"api_key": census_api_key}
    )

    bureau_manager = BureauDataManager(api_manager)
    headers = [
        "ZIP Code", "Total Population", "Male Population", "Female Population",
        "White Population", "Black or African American Population",
        "American Indian and Alaska Native Population", "Asian Population",
        "Native Hawaiian and Other Pacific Islander Population", "Some Other Race Population",
        "Two or More Races Population", "Age Under 5", "Age 5 to 9", "Age 10 to 14",
        "Age 15 to 17", "Age 18 to 19", "Age 20", "Age 21", "Age 22 to 24", "Age 25 to 29",
        "Age 30 to 34", "Age 35 to 39", "Age 40 to 44", "Age 45 to 49", "Age 50 to 54",
        "Age 55 to 59", "Age 60 to 61", "Age 62 to 64", "Age 65 to 66", "Age 67 to 69",
        "Age 70 to 74", "Age 75 to 79", "Age 80 to 84", "Age 85 and over"
    ]
    data_writer = DataWriter("bureau_data.csv", headers=headers)
    progress_manager = ProgressManager("progress.json", progress_keys=["last_zip_code"])

    # User input here
    zip_code = input("Enter the ZIP code for which you want demographic data: ").strip()
    bureau_manager.fetch_and_save_bureau_data(zip_code, data_writer, progress_manager, data_point_limit=10000)


if __name__ == "__main__":
    main()
